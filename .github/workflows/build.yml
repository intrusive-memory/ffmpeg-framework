name: Build FFmpeg XCFrameworks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      ffmpeg-version:
        description: "FFmpeg version to build (7.0.3, 7.1.2, 8.0, or 'all')"
        required: false
        default: "all"

permissions:
  contents: write

jobs:
  build:
    name: Build FFmpeg ${{ matrix.ffmpeg-version }}
    runs-on: macos-15
    strategy:
      fail-fast: false
      matrix:
        ffmpeg-version: ['7.0.3', '7.1.2', '8.0']
    env:
      FFMPEG_REF: n${{ matrix.ffmpeg-version }}
      FFMPEG_VERSION: ${{ matrix.ffmpeg-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode 16.4
        run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

      - name: Show toolchain details
        run: |
          xcodebuild -version
          swift --version

      - name: Install build dependencies
        run: |
          brew update
          brew install nasm yasm pkg-config automake cmake ninja meson || true

      - name: Restore FFmpeg source cache
        uses: actions/cache@v4
        with:
          path: build/_sources/ffmpeg
          key: ${{ runner.os }}-ffmpeg-${{ env.FFMPEG_REF }}

      - name: Build XCFrameworks
        run: Scripts/build-ffmpeg.sh --platform macos --ffmpeg-ref "$FFMPEG_REF"

      - name: Archive XCFrameworks
        run: |
          mkdir -p build/artifacts
          tar -czf build/artifacts/ffmpeg-${{ matrix.ffmpeg-version }}-xcframeworks.tar.gz -C Artifacts/xcframeworks .

      - name: Upload XCFrameworks
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.ffmpeg-version }}-xcframeworks
          path: build/artifacts/ffmpeg-${{ matrix.ffmpeg-version }}-xcframeworks.tar.gz

      - name: Generate SwiftPM checksums
        run: |
          mkdir -p build/checksums
          shopt -s nullglob
          frameworks=(Artifacts/xcframeworks/*.xcframework)
          if [ ${#frameworks[@]} -eq 0 ]; then
            echo 'error: no XCFrameworks found in Artifacts/xcframeworks' >&2
            exit 1
          fi
          for framework in "${frameworks[@]}"; do
            base=$(basename "$framework")
            zip_path="build/artifacts/${base}-${{ matrix.ffmpeg-version }}.zip"
            ditto -c -k --sequesterRsrc --keepParent "$framework" "$zip_path"
            checksum=$(swift package compute-checksum "$zip_path")
            echo "${base}: ${checksum}" | tee "build/checksums/${base}-${{ matrix.ffmpeg-version }}.checksum"
          done

      - name: Upload checksums
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.ffmpeg-version }}-checksums
          path: build/checksums/*.checksum

      - name: Upload framework zips
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.ffmpeg-version }}-zips
          path: build/artifacts/*.zip

  publish:
    name: Publish release artifacts
    needs: build
    if: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
    runs-on: macos-15
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: publish

      - name: Organize release assets
        run: |
          mkdir -p release-assets
          # Move all artifacts to release-assets directory
          find publish -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.checksum" \) -exec mv {} release-assets/ \;
          ls -lah release-assets/

      - name: Create or update tags
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          for version in 7.0.3 7.1.2 8.0; do
            tag="ffmpeg-${version}"

            # Delete tag if it exists (locally and remotely)
            git tag -d "${tag}" 2>/dev/null || true
            git push origin ":refs/tags/${tag}" 2>/dev/null || true

            # Create new tag
            git tag -a "${tag}" -m "FFmpeg ${version} XCFramework build"
            git push origin "${tag}"
          done

      - name: Create or update releases
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          for version in 7.0.3 7.1.2 8.0; do
            tag="ffmpeg-${version}"

            # Delete release if it exists
            gh release delete "${tag}" -y 2>/dev/null || true

            # Create release notes
            cat > release-notes.md <<'EOF'
Pre-built XCFrameworks for FFmpeg VERSION_PLACEHOLDER

This release includes:
- Static XCFrameworks for macOS (arm64)
- All FFmpeg libraries: avcodec, avdevice, avfilter, avformat, avutil, postproc, swresample, swscale
- SwiftPM checksums for integration

## Usage

Download the frameworks and add them to your project, or use SwiftPM with the checksums provided.
EOF
            sed -i.bak "s/VERSION_PLACEHOLDER/${version}/" release-notes.md

            # Create new release
            gh release create "${tag}" \
              --title "FFmpeg ${version} XCFrameworks" \
              --notes-file release-notes.md \
              release-assets/ffmpeg-${version}-xcframeworks.tar.gz \
              release-assets/*-${version}.zip \
              release-assets/*-${version}.checksum
          done
